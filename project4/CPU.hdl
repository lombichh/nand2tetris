// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/05/CPU.hdl

/**
 * The Hack CPU (Central Processing unit), consisting of an ALU,
 * two registers named A and D, and a program counter named PC.
 * The CPU is designed to fetch and execute instructions written in 
 * the Hack machine language. In particular, functions as follows:
 * Executes the inputted instruction according to the Hack machine 
 * language specification. The D and A in the language specification
 * refer to CPU-resident registers, while M refers to the external
 * memory location addressed by A, i.e. to Memory[A]. The inM input 
 * holds the value of this location. If the current instruction needs 
 * to write a value to M, the value is placed in outM, the address 
 * of the target location is placed in the addressM output, and the 
 * writeM control bit is asserted. (When writeM==0, any value may 
 * appear in outM). The outM and writeM outputs are combinational: 
 * they are affected instantaneously by the execution of the current 
 * instruction. The addressM and pc outputs are clocked: although they 
 * are affected by the execution of the current instruction, they commit 
 * to their new values only in the next time step. If reset==1 then the 
 * CPU jumps to address 0 (i.e. pc is set to 0 in next time step) rather 
 * than to the address resulting from executing the current instruction. 
 */

CHIP CPU {

    IN  inM[16],         // M value input  (M = contents of RAM[A])
        instruction[16], // Instruction for execution
        reset;           // Signals whether to re-start the current
                         // program (reset==1) or continue executing
                         // the current program (reset==0).

    OUT outM[16],        // M value output
        writeM,          // Write to M? 
        addressM[15],    // Address in data memory (of M)
        pc[15];          // address of next instruction

    PARTS:
    // Put your code here:
    // D Register
    And(a = instruction[15], b = instruction[4], out = dregload); // if (c instruction && d2) then load = 1
    DRegister(in = aluout, load = dregload, out = dregout);

    // A Register
    Not(in = instruction[15], out = ainst);

    Or(a = ainst, b = instruction[5], out = aregload); // if (a instruction || d3) then load = 1
    Mux16(a = aluout, b = instruction, sel = ainst, out = aregin); // if a instruction then in = instruction[0..14] else in = aluout
    
    ARegister(in = aregin, load = aregload, out = aregout);

    // ALU
    Mux16(a = aregout, b = inM, sel = instruction[12], out = aluy); // if a then y = inM else y = aregout
    ALU(x = dregout, y = aluy, zx = instruction[11],
        nx = instruction[10], zy = instruction[9], 
        ny = instruction[8], f = instruction[7], 
        no = instruction[6], out = aluout, zr = zr, ng = ng);

    // PC
    // create jmp check
    Or(a = ng, b = zr, out = ngzr);
    Not(in = ngzr, out = pos);
    Or(a = pos, b = zr, out = poszr);
    Not(in = zr, out = nzr);

    Mux8Way(a = false, b = pos, c = zr, d = poszr,
            e = ng, f = nzr, g = ngzr, h = true,
            sel = instruction[0..2], out = mux8way); // choice jmp check based on instruction[0..2]
    And(a = mux8way, b = instruction[15], out = pcload); // if c instruction then jmp check
    Not(in = pcload, out = pcinc); // pcinc = !pcload

    PC(in = aregout, load = pcload, inc = pcinc, reset = reset, out[0..14] = pc);

    // output
    And(a = instruction[15], b = instruction[3], out = writeM); // if (c instruction && d3) then writeM = 1
    And16(a = aregout, b = aregout, out[0..14] = addressM); // addressM = aregout
    And16(a = aluout, b = aluout, out = outM); // outM = aluout
}